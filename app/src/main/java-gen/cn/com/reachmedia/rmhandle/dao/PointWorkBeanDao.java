package cn.com.reachmedia.rmhandle.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import cn.com.reachmedia.rmhandle.bean.PointWorkBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table POINT_WORK_BEAN.
*/
public class PointWorkBeanDao extends AbstractDao<PointWorkBean, Long> {

    public static final String TABLENAME = "POINT_WORK_BEAN";

    /**
     * Properties of entity PointWorkBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property LastId = new Property(1, Long.class, "lastId", false, "LAST_ID");
        public final static Property UserId = new Property(2, String.class, "userId", false, "USER_ID");
        public final static Property WorkId = new Property(3, String.class, "workId", false, "WORK_ID");
        public final static Property PointId = new Property(4, String.class, "pointId", false, "POINT_ID");
        public final static Property State = new Property(5, Integer.class, "state", false, "STATE");
        public final static Property RepairType = new Property(6, Integer.class, "repairType", false, "REPAIR_TYPE");
        public final static Property RepairDesc = new Property(7, String.class, "repairDesc", false, "REPAIR_DESC");
        public final static Property ErrorType = new Property(8, Integer.class, "errorType", false, "ERROR_TYPE");
        public final static Property ErrorDesc = new Property(9, String.class, "errorDesc", false, "ERROR_DESC");
        public final static Property Lon = new Property(10, String.class, "lon", false, "LON");
        public final static Property Lat = new Property(11, String.class, "lat", false, "LAT");
        public final static Property WorkTime = new Property(12, String.class, "workTime", false, "WORK_TIME");
        public final static Property OnlineTime = new Property(13, String.class, "onlineTime", false, "ONLINE_TIME");
        public final static Property NativeState = new Property(14, String.class, "nativeState", false, "NATIVE_STATE");
        public final static Property FileCount = new Property(15, Integer.class, "fileCount", false, "FILE_COUNT");
        public final static Property Filedelete = new Property(16, String.class, "filedelete", false, "FILEDELETE");
        public final static Property FileXY = new Property(17, String.class, "fileXY", false, "FILE_XY");
        public final static Property FileTime = new Property(18, String.class, "fileTime", false, "FILE_TIME");
        public final static Property FileIdData = new Property(19, String.class, "fileIdData", false, "FILE_ID_DATA");
        public final static Property FilePathData = new Property(20, String.class, "filePathData", false, "FILE_PATH_DATA");
        public final static Property Doorpicid = new Property(21, String.class, "doorpicid", false, "DOORPICID");
        public final static Property Doorpic = new Property(22, String.class, "doorpic", false, "DOORPIC");
    };


    public PointWorkBeanDao(DaoConfig config) {
        super(config);
    }
    
    public PointWorkBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'POINT_WORK_BEAN' (" + //
                "'ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'LAST_ID' INTEGER," + // 1: lastId
                "'USER_ID' TEXT," + // 2: userId
                "'WORK_ID' TEXT," + // 3: workId
                "'POINT_ID' TEXT," + // 4: pointId
                "'STATE' INTEGER," + // 5: state
                "'REPAIR_TYPE' INTEGER," + // 6: repairType
                "'REPAIR_DESC' TEXT," + // 7: repairDesc
                "'ERROR_TYPE' INTEGER," + // 8: errorType
                "'ERROR_DESC' TEXT," + // 9: errorDesc
                "'LON' TEXT," + // 10: lon
                "'LAT' TEXT," + // 11: lat
                "'WORK_TIME' TEXT," + // 12: workTime
                "'ONLINE_TIME' TEXT," + // 13: onlineTime
                "'NATIVE_STATE' TEXT," + // 14: nativeState
                "'FILE_COUNT' INTEGER," + // 15: fileCount
                "'FILEDELETE' TEXT," + // 16: filedelete
                "'FILE_XY' TEXT," + // 17: fileXY
                "'FILE_TIME' TEXT," + // 18: fileTime
                "'FILE_ID_DATA' TEXT," + // 19: fileIdData
                "'FILE_PATH_DATA' TEXT," + // 20: filePathData
                "'DOORPICID' TEXT," + // 21: doorpicid
                "'DOORPIC' TEXT);"); // 22: doorpic
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_POINT_WORK_BEAN_ID ON POINT_WORK_BEAN" +
                " (ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'POINT_WORK_BEAN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PointWorkBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long lastId = entity.getLastId();
        if (lastId != null) {
            stmt.bindLong(2, lastId);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
 
        String workId = entity.getWorkId();
        if (workId != null) {
            stmt.bindString(4, workId);
        }
 
        String pointId = entity.getPointId();
        if (pointId != null) {
            stmt.bindString(5, pointId);
        }
 
        Integer state = entity.getState();
        if (state != null) {
            stmt.bindLong(6, state);
        }
 
        Integer repairType = entity.getRepairType();
        if (repairType != null) {
            stmt.bindLong(7, repairType);
        }
 
        String repairDesc = entity.getRepairDesc();
        if (repairDesc != null) {
            stmt.bindString(8, repairDesc);
        }
 
        Integer errorType = entity.getErrorType();
        if (errorType != null) {
            stmt.bindLong(9, errorType);
        }
 
        String errorDesc = entity.getErrorDesc();
        if (errorDesc != null) {
            stmt.bindString(10, errorDesc);
        }
 
        String lon = entity.getLon();
        if (lon != null) {
            stmt.bindString(11, lon);
        }
 
        String lat = entity.getLat();
        if (lat != null) {
            stmt.bindString(12, lat);
        }
 
        String workTime = entity.getWorkTime();
        if (workTime != null) {
            stmt.bindString(13, workTime);
        }
 
        String onlineTime = entity.getOnlineTime();
        if (onlineTime != null) {
            stmt.bindString(14, onlineTime);
        }
 
        String nativeState = entity.getNativeState();
        if (nativeState != null) {
            stmt.bindString(15, nativeState);
        }
 
        Integer fileCount = entity.getFileCount();
        if (fileCount != null) {
            stmt.bindLong(16, fileCount);
        }
 
        String filedelete = entity.getFiledelete();
        if (filedelete != null) {
            stmt.bindString(17, filedelete);
        }
 
        String fileXY = entity.getFileXY();
        if (fileXY != null) {
            stmt.bindString(18, fileXY);
        }
 
        String fileTime = entity.getFileTime();
        if (fileTime != null) {
            stmt.bindString(19, fileTime);
        }
 
        String fileIdData = entity.getFileIdData();
        if (fileIdData != null) {
            stmt.bindString(20, fileIdData);
        }
 
        String filePathData = entity.getFilePathData();
        if (filePathData != null) {
            stmt.bindString(21, filePathData);
        }
 
        String doorpicid = entity.getDoorpicid();
        if (doorpicid != null) {
            stmt.bindString(22, doorpicid);
        }
 
        String doorpic = entity.getDoorpic();
        if (doorpic != null) {
            stmt.bindString(23, doorpic);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PointWorkBean readEntity(Cursor cursor, int offset) {
        PointWorkBean entity = new PointWorkBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // lastId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // workId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pointId
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // state
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // repairType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // repairDesc
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // errorType
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // errorDesc
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // lon
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // lat
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // workTime
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // onlineTime
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // nativeState
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // fileCount
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // filedelete
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // fileXY
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // fileTime
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // fileIdData
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // filePathData
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // doorpicid
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22) // doorpic
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PointWorkBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLastId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWorkId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPointId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setState(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setRepairType(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setRepairDesc(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setErrorType(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setErrorDesc(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLon(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLat(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setWorkTime(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setOnlineTime(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setNativeState(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setFileCount(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setFiledelete(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setFileXY(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setFileTime(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setFileIdData(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setFilePathData(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setDoorpicid(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setDoorpic(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PointWorkBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PointWorkBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
