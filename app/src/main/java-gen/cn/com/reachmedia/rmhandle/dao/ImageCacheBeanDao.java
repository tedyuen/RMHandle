package cn.com.reachmedia.rmhandle.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import cn.com.reachmedia.rmhandle.bean.ImageCacheBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table IMAGE_CACHE_BEAN.
*/
public class ImageCacheBeanDao extends AbstractDao<ImageCacheBean, Long> {

    public static final String TABLENAME = "IMAGE_CACHE_BEAN";

    /**
     * Properties of entity ImageCacheBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Url = new Property(1, String.class, "url", false, "URL");
        public final static Property Path = new Property(2, String.class, "path", false, "PATH");
        public final static Property Start_time = new Property(3, java.util.Date.class, "start_time", false, "START_TIME");
        public final static Property Create_time = new Property(4, java.util.Date.class, "create_time", false, "CREATE_TIME");
        public final static Property Index = new Property(5, Long.class, "index", false, "INDEX");
        public final static Property Community_id = new Property(6, String.class, "community_id", false, "COMMUNITY_ID");
    };


    public ImageCacheBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ImageCacheBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'IMAGE_CACHE_BEAN' (" + //
                "'ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'URL' TEXT," + // 1: url
                "'PATH' TEXT," + // 2: path
                "'START_TIME' INTEGER," + // 3: start_time
                "'CREATE_TIME' INTEGER," + // 4: create_time
                "'INDEX' INTEGER," + // 5: index
                "'COMMUNITY_ID' TEXT);"); // 6: community_id
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_IMAGE_CACHE_BEAN_ID ON IMAGE_CACHE_BEAN" +
                " (ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'IMAGE_CACHE_BEAN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ImageCacheBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(3, path);
        }
 
        java.util.Date start_time = entity.getStart_time();
        if (start_time != null) {
            stmt.bindLong(4, start_time.getTime());
        }
 
        java.util.Date create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindLong(5, create_time.getTime());
        }
 
        Long index = entity.getIndex();
        if (index != null) {
            stmt.bindLong(6, index);
        }
 
        String community_id = entity.getCommunity_id();
        if (community_id != null) {
            stmt.bindString(7, community_id);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ImageCacheBean readEntity(Cursor cursor, int offset) {
        ImageCacheBean entity = new ImageCacheBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // url
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // path
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // start_time
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // create_time
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // index
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // community_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ImageCacheBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStart_time(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setCreate_time(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setIndex(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setCommunity_id(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ImageCacheBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ImageCacheBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
