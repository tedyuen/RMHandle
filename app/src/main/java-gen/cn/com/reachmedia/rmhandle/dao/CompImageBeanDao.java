package cn.com.reachmedia.rmhandle.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import cn.com.reachmedia.rmhandle.bean.CompImageBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table COMP_IMAGE_BEAN.
*/
public class CompImageBeanDao extends AbstractDao<CompImageBean, Long> {

    public static final String TABLENAME = "COMP_IMAGE_BEAN";

    /**
     * Properties of entity CompImageBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Userid = new Property(1, String.class, "userid", false, "USERID");
        public final static Property Workid = new Property(2, String.class, "workid", false, "WORKID");
        public final static Property Pointid = new Property(3, String.class, "pointid", false, "POINTID");
        public final static Property Source_path = new Property(4, String.class, "source_path", false, "SOURCE_PATH");
        public final static Property Target_path = new Property(5, String.class, "target_path", false, "TARGET_PATH");
        public final static Property Water_mask = new Property(6, Boolean.class, "water_mask", false, "WATER_MASK");
        public final static Property Create_time = new Property(7, java.util.Date.class, "create_time", false, "CREATE_TIME");
        public final static Property Compress_time = new Property(8, java.util.Date.class, "compress_time", false, "COMPRESS_TIME");
        public final static Property State = new Property(9, Integer.class, "state", false, "STATE");
    };


    public CompImageBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CompImageBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'COMP_IMAGE_BEAN' (" + //
                "'ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'USERID' TEXT," + // 1: userid
                "'WORKID' TEXT," + // 2: workid
                "'POINTID' TEXT," + // 3: pointid
                "'SOURCE_PATH' TEXT," + // 4: source_path
                "'TARGET_PATH' TEXT," + // 5: target_path
                "'WATER_MASK' INTEGER," + // 6: water_mask
                "'CREATE_TIME' INTEGER," + // 7: create_time
                "'COMPRESS_TIME' INTEGER," + // 8: compress_time
                "'STATE' INTEGER);"); // 9: state
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_COMP_IMAGE_BEAN_ID ON COMP_IMAGE_BEAN" +
                " (ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'COMP_IMAGE_BEAN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CompImageBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(2, userid);
        }
 
        String workid = entity.getWorkid();
        if (workid != null) {
            stmt.bindString(3, workid);
        }
 
        String pointid = entity.getPointid();
        if (pointid != null) {
            stmt.bindString(4, pointid);
        }
 
        String source_path = entity.getSource_path();
        if (source_path != null) {
            stmt.bindString(5, source_path);
        }
 
        String target_path = entity.getTarget_path();
        if (target_path != null) {
            stmt.bindString(6, target_path);
        }
 
        Boolean water_mask = entity.getWater_mask();
        if (water_mask != null) {
            stmt.bindLong(7, water_mask ? 1l: 0l);
        }
 
        java.util.Date create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindLong(8, create_time.getTime());
        }
 
        java.util.Date compress_time = entity.getCompress_time();
        if (compress_time != null) {
            stmt.bindLong(9, compress_time.getTime());
        }
 
        Integer state = entity.getState();
        if (state != null) {
            stmt.bindLong(10, state);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CompImageBean readEntity(Cursor cursor, int offset) {
        CompImageBean entity = new CompImageBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // workid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pointid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // source_path
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // target_path
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // water_mask
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // create_time
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // compress_time
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9) // state
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CompImageBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWorkid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPointid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSource_path(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTarget_path(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setWater_mask(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setCreate_time(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setCompress_time(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setState(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CompImageBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CompImageBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
