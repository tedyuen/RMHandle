package cn.com.reachmedia.rmhandle.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import cn.com.reachmedia.rmhandle.bean.PointBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table POINT_BEAN.
*/
public class PointBeanDao extends AbstractDao<PointBean, Long> {

    public static final String TABLENAME = "POINT_BEAN";

    /**
     * Properties of entity PointBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property WorkId = new Property(2, String.class, "workId", false, "WORK_ID");
        public final static Property Cid = new Property(3, String.class, "cid", false, "CID");
        public final static Property Cname = new Property(4, String.class, "cname", false, "CNAME");
        public final static Property DoorId = new Property(5, String.class, "doorId", false, "DOOR_ID");
        public final static Property Door = new Property(6, String.class, "door", false, "DOOR");
        public final static Property WorkUp = new Property(7, Integer.class, "workUp", false, "WORK_UP");
        public final static Property WorkUpPhone = new Property(8, Integer.class, "workUpPhone", false, "WORK_UP_PHONE");
        public final static Property WorkDown = new Property(9, Integer.class, "workDown", false, "WORK_DOWN");
        public final static Property WorkDownPhone = new Property(10, Integer.class, "workDownPhone", false, "WORK_DOWN_PHONE");
        public final static Property WorkCheck = new Property(11, Integer.class, "workCheck", false, "WORK_CHECK");
        public final static Property PointId = new Property(12, String.class, "pointId", false, "POINT_ID");
        public final static Property Ground = new Property(13, Integer.class, "ground", false, "GROUND");
        public final static Property CDoorPic = new Property(14, String.class, "cDoorPic", false, "C_DOOR_PIC");
        public final static Property ErrorDesc = new Property(15, String.class, "errorDesc", false, "ERROR_DESC");
        public final static Property IsPhoto = new Property(16, Integer.class, "isPhoto", false, "IS_PHOTO");
        public final static Property State = new Property(17, Integer.class, "state", false, "STATE");
        public final static Property StateType = new Property(18, Integer.class, "stateType", false, "STATE_TYPE");
        public final static Property UpdateTime = new Property(19, String.class, "updateTime", false, "UPDATE_TIME");
        public final static Property Pictime = new Property(20, String.class, "pictime", false, "PICTIME");
        public final static Property Worktime = new Property(21, String.class, "worktime", false, "WORKTIME");
        public final static Property Starttime = new Property(22, java.util.Date.class, "starttime", false, "STARTTIME");
        public final static Property Endtime = new Property(23, java.util.Date.class, "endtime", false, "ENDTIME");
        public final static Property Communityid = new Property(24, String.class, "communityid", false, "COMMUNITYID");
        public final static Property Communityname = new Property(25, String.class, "communityname", false, "COMMUNITYNAME");
        public final static Property FileId = new Property(26, String.class, "fileId", false, "FILE_ID");
        public final static Property FileUrlB = new Property(27, String.class, "fileUrlB", false, "FILE_URL_B");
        public final static Property FileUrlS = new Property(28, String.class, "fileUrlS", false, "FILE_URL_S");
    };


    public PointBeanDao(DaoConfig config) {
        super(config);
    }
    
    public PointBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'POINT_BEAN' (" + //
                "'ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'USER_ID' TEXT," + // 1: userId
                "'WORK_ID' TEXT," + // 2: workId
                "'CID' TEXT," + // 3: cid
                "'CNAME' TEXT," + // 4: cname
                "'DOOR_ID' TEXT," + // 5: doorId
                "'DOOR' TEXT," + // 6: door
                "'WORK_UP' INTEGER," + // 7: workUp
                "'WORK_UP_PHONE' INTEGER," + // 8: workUpPhone
                "'WORK_DOWN' INTEGER," + // 9: workDown
                "'WORK_DOWN_PHONE' INTEGER," + // 10: workDownPhone
                "'WORK_CHECK' INTEGER," + // 11: workCheck
                "'POINT_ID' TEXT," + // 12: pointId
                "'GROUND' INTEGER," + // 13: ground
                "'C_DOOR_PIC' TEXT," + // 14: cDoorPic
                "'ERROR_DESC' TEXT," + // 15: errorDesc
                "'IS_PHOTO' INTEGER," + // 16: isPhoto
                "'STATE' INTEGER," + // 17: state
                "'STATE_TYPE' INTEGER," + // 18: stateType
                "'UPDATE_TIME' TEXT," + // 19: updateTime
                "'PICTIME' TEXT," + // 20: pictime
                "'WORKTIME' TEXT," + // 21: worktime
                "'STARTTIME' INTEGER," + // 22: starttime
                "'ENDTIME' INTEGER," + // 23: endtime
                "'COMMUNITYID' TEXT," + // 24: communityid
                "'COMMUNITYNAME' TEXT," + // 25: communityname
                "'FILE_ID' TEXT," + // 26: fileId
                "'FILE_URL_B' TEXT," + // 27: fileUrlB
                "'FILE_URL_S' TEXT);"); // 28: fileUrlS
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_POINT_BEAN_ID ON POINT_BEAN" +
                " (ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'POINT_BEAN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PointBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String workId = entity.getWorkId();
        if (workId != null) {
            stmt.bindString(3, workId);
        }
 
        String cid = entity.getCid();
        if (cid != null) {
            stmt.bindString(4, cid);
        }
 
        String cname = entity.getCname();
        if (cname != null) {
            stmt.bindString(5, cname);
        }
 
        String doorId = entity.getDoorId();
        if (doorId != null) {
            stmt.bindString(6, doorId);
        }
 
        String door = entity.getDoor();
        if (door != null) {
            stmt.bindString(7, door);
        }
 
        Integer workUp = entity.getWorkUp();
        if (workUp != null) {
            stmt.bindLong(8, workUp);
        }
 
        Integer workUpPhone = entity.getWorkUpPhone();
        if (workUpPhone != null) {
            stmt.bindLong(9, workUpPhone);
        }
 
        Integer workDown = entity.getWorkDown();
        if (workDown != null) {
            stmt.bindLong(10, workDown);
        }
 
        Integer workDownPhone = entity.getWorkDownPhone();
        if (workDownPhone != null) {
            stmt.bindLong(11, workDownPhone);
        }
 
        Integer workCheck = entity.getWorkCheck();
        if (workCheck != null) {
            stmt.bindLong(12, workCheck);
        }
 
        String pointId = entity.getPointId();
        if (pointId != null) {
            stmt.bindString(13, pointId);
        }
 
        Integer ground = entity.getGround();
        if (ground != null) {
            stmt.bindLong(14, ground);
        }
 
        String cDoorPic = entity.getCDoorPic();
        if (cDoorPic != null) {
            stmt.bindString(15, cDoorPic);
        }
 
        String errorDesc = entity.getErrorDesc();
        if (errorDesc != null) {
            stmt.bindString(16, errorDesc);
        }
 
        Integer isPhoto = entity.getIsPhoto();
        if (isPhoto != null) {
            stmt.bindLong(17, isPhoto);
        }
 
        Integer state = entity.getState();
        if (state != null) {
            stmt.bindLong(18, state);
        }
 
        Integer stateType = entity.getStateType();
        if (stateType != null) {
            stmt.bindLong(19, stateType);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(20, updateTime);
        }
 
        String pictime = entity.getPictime();
        if (pictime != null) {
            stmt.bindString(21, pictime);
        }
 
        String worktime = entity.getWorktime();
        if (worktime != null) {
            stmt.bindString(22, worktime);
        }
 
        java.util.Date starttime = entity.getStarttime();
        if (starttime != null) {
            stmt.bindLong(23, starttime.getTime());
        }
 
        java.util.Date endtime = entity.getEndtime();
        if (endtime != null) {
            stmt.bindLong(24, endtime.getTime());
        }
 
        String communityid = entity.getCommunityid();
        if (communityid != null) {
            stmt.bindString(25, communityid);
        }
 
        String communityname = entity.getCommunityname();
        if (communityname != null) {
            stmt.bindString(26, communityname);
        }
 
        String fileId = entity.getFileId();
        if (fileId != null) {
            stmt.bindString(27, fileId);
        }
 
        String fileUrlB = entity.getFileUrlB();
        if (fileUrlB != null) {
            stmt.bindString(28, fileUrlB);
        }
 
        String fileUrlS = entity.getFileUrlS();
        if (fileUrlS != null) {
            stmt.bindString(29, fileUrlS);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PointBean readEntity(Cursor cursor, int offset) {
        PointBean entity = new PointBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // workId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cname
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // doorId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // door
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // workUp
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // workUpPhone
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // workDown
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // workDownPhone
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // workCheck
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // pointId
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // ground
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // cDoorPic
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // errorDesc
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // isPhoto
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // state
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // stateType
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // updateTime
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // pictime
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // worktime
            cursor.isNull(offset + 22) ? null : new java.util.Date(cursor.getLong(offset + 22)), // starttime
            cursor.isNull(offset + 23) ? null : new java.util.Date(cursor.getLong(offset + 23)), // endtime
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // communityid
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // communityname
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // fileId
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // fileUrlB
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28) // fileUrlS
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PointBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWorkId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCname(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDoorId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDoor(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setWorkUp(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setWorkUpPhone(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setWorkDown(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setWorkDownPhone(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setWorkCheck(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setPointId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setGround(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setCDoorPic(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setErrorDesc(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setIsPhoto(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setState(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setStateType(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setUpdateTime(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setPictime(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setWorktime(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setStarttime(cursor.isNull(offset + 22) ? null : new java.util.Date(cursor.getLong(offset + 22)));
        entity.setEndtime(cursor.isNull(offset + 23) ? null : new java.util.Date(cursor.getLong(offset + 23)));
        entity.setCommunityid(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setCommunityname(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setFileId(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setFileUrlB(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setFileUrlS(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PointBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PointBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
